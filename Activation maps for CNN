def activation_map(model, image):
    import cv2
    from skimage import color
    from skimage import io
    import tensorflow.keras.backend as K
    
    y_test1=model.predict(image.reshape(1,512,512,1))
    x=image.reshape(1,512,512,1)
    ##getting input
    inputs=model.input
    ##getting last conv layer
    last_conv_layer = model.get_layer('conv2d_2')
    
    #getting output of all layers
    outputs = [layer.output for layer in model.layers]
    
    #getting gradients of last conv layerr
    grads = K.gradients(outputs, last_conv_layer.output)[0]
    grads.shape
    
    #taking mean of gradietns accross channels
    pooled_grads = K.mean(grads, axis=(0, 1, 2))
    iterate = K.function([model.input], [pooled_grads, last_conv_layer.output[0]])
    pooled_grads_value, conv_layer_output_value = iterate([x])
    
    #multiplying gradients across all channels/features and getting heatmap
    for i in range(128):
            conv_layer_output_value[:, :, i] *= pooled_grads_value[i]
    heatmap = np.mean(conv_layer_output_value, axis=-1)
    #heatmap = tf.squeeze(heatmap)
    
    #cnverting heatmap tp 0 to1 then scaling to 0-255
    
    heatmap = np.maximum(heatmap, 0)
    heatmap /= np.max(heatmap)

    heatmap = cv2.resize(heatmap, (512, 512))
    heatmap1 = np.uint8(255 * heatmap)

    ##plotting heatmap overlaying with grayscale image
    plt.figure(figsize=(15,15))
    plt.subplot(1,2,1)
    plt.imshow(x.reshape(512,512),cmap='gray',interpolation='none')
    plt.imshow(heatmap1,cmap='inferno',interpolation='none',alpha=0.6)
    plt.colorbar(fraction=0.046, pad=0.04)
    plt.subplot(1,2,2)
    plt.imshow(x.reshape(512,512),cmap='gray',interpolation='none')
    plt.colorbar(fraction=0.046, pad=0.04)
    return None
